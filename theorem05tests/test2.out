f: x(1)^2+x(2)^6+x(3)^6, max length: 11
g: y(1)*y(2)*y(3), max length: 2
result polynomial: x(1)^2*w+x(2)^6*w+x(3)^6*w+y(1)*y(2)*y(3)+w^3
first center of blowup: w,y(3),y(2),y(1),x(3),x(2),x(1)
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
// ** int division with `/`: use `div` instead in line >>   return(r);<<
